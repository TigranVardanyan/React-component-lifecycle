{"version":3,"sources":["App.module.css","components/Counter/Counter.module.css","components/Counter/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Counter","props","InInputChange","count","parseInt","selfChanges","console","log","nthCounter","state","counterOpened","selfCount","this","nextProps","nextState","nextContext","setState","prevProps","prevState","snapshot","noValidate","autoComplete","className","styles","counter","TextField","id","variant","label","type","value","onChange","e","target","Component","App","counterInputChange","message","fetch","then","res","json","result","error","unmountComponentAtNode","document","getElementById","operator","Fragment","CssBaseline","Container","maxWidth","Grid","container","justify","direction","alignItems","heading","ToggleButton","selected","onClick","showHideCounter","hidden","ButtonGroup","aria-label","Button","changeCount","color","handleClick","something","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5dbeabaa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hidden\":\"App_hidden__2bKWL\",\"heading\":\"App_heading__3rnww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__3hVvd\"};","import React, {Component} from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nimport styles from \"./Counter.module.css\";\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(`%c[Counter${this.props.nthCounter}] Constructor`, \"color:blue\");\r\n        this.state = {\r\n            count: 0,\r\n            counterOpened: true,\r\n            selfCount: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(`%c[Counter${this.props.nthCounter}] componentDidMount`, \"color:blue\");\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        if ((nextProps.counterOpened === true && (this.props.count !== nextProps.count)) ||\r\n            (this.props.counterOpened === false && nextProps.counterOpened === true && this.state.selfCount !== nextProps.count)) {\r\n            console.log(`%c[Counter${this.props.nthCounter}] shouldComponentUpdate() true`, \"color:blue\");\r\n            this.setState({selfCount:nextProps.count})\r\n            return true;\r\n        } else {\r\n            console.log(`%c[Counter${this.props.nthCounter}] shouldComponentUpdate() false`, \"color:blue\");\r\n            return false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(`%c[Counter${this.props.nthCounter}] componentDidUpdate()`, \"color:blue\");\r\n        console.log(\"\")\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(`%c[Counter${this.props.nthCounter}] componentWillUnmount()`, \"color:blue\");\r\n    }\r\n\r\n    static getDerivedStateFromProps(props) {\r\n        console.log(`%c[Counter${props.nthCounter}] static getDerivedStateFromProps()`, \"color:blue\");\r\n        return null;\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        console.log(`%c[Counter${this.props.nthCounter}] getSnapshotBeforeUpdate()`, \"color:blue\");\r\n        return null;\r\n    }\r\n\r\n    // methods\r\n\r\n    InInputChange = (count) => {\r\n        count = parseInt(count)\r\n        this.props.selfChanges(count);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                noValidate\r\n                autoComplete=\"off\"\r\n                className={styles.counter}\r\n            >\r\n                {console.log(`%c[Counter${this.props.nthCounter}] render()`, \"color:blue\")}\r\n                <TextField id=\"counterFiled\"\r\n                           variant={\"outlined\"}\r\n                           label={`Counter ${this.props.nthCounter}`}\r\n                           type={\"number\"}\r\n                           value={this.props.count}\r\n                           onChange={(e) => this.InInputChange(e.target.value)}\r\n                />\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter","import React, {Component} from 'react'\r\nimport {unmountComponentAtNode} from 'react-dom'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Counter from \"./components/Counter/Counter\";\r\nimport './App.css';\r\n\r\n\r\nimport styles from \"./App.module.css\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        console.log(\"%c[App] Constructor\", \"color:orange\");\r\n        super(props);\r\n        this.state = {\r\n            count: 0,\r\n            counterOpened: false,\r\n            message: \"\",\r\n        };\r\n        console.log(\"%c[App] state - \" + this.state.count, \"color:orange\")\r\n    }\r\n\r\n    static getDerivedStateFromProps(props) {\r\n        console.log(\"%c[App] static getDerivedStateFromProps()]\", \"color:orange\");\r\n        console.log(\"%c[App]\" + \"%c write something from props to state\", \"color:orange\", \"color:green\");\r\n        const {something} = {something: props};\r\n        return {something};\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.mocki.io/v1/cc7dcf62\") //return {\"key\":\"value\"}\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        count: parseInt(result.count)\r\n                    });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.error(\"error\", error);\r\n                }\r\n            );\r\n        console.log(\"%c[App] componentDidMount\", \"color:orange\");\r\n        //eslint-disable-next-line no-useless-concat\r\n        console.log(\"%c[App]\" + \"%c side effect - update state(component after request)\", \"color:orange\", \"color:green\");\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        if (true) {\r\n            console.log(\"%c[App] shouldComponentUpdate() - true\", \"color:orange\");\r\n            console.log(\"%c[App] nextState - \" + nextState.count, \"color:orange\");\r\n            return true;\r\n        } else {\r\n            console.log(\"%c[App] shouldComponentUpdate() - false\", \"color:orange\");\r\n            console.log(\"%c[App] nextState - \" + nextState.count, \"color:orange\");\r\n            return false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(\"%c[App] componentDidUpdate()\", \"color:orange\");\r\n        console.log(\"%c[App] prevState - \" + prevState.count, \"color:orange\");\r\n        console.log(\"\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"\");\r\n        console.log(\"%c[App] componentWillUnmount()\", \"color:orange\");\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        console.log(\"%c[App] getSnapshotBeforeUpdate()]\", \"color:orange\");\r\n        return null;\r\n    }\r\n\r\n    // methods\r\n\r\n    handleClick() {\r\n        unmountComponentAtNode(document.getElementById('root'));\r\n    }\r\n\r\n    showHideCounter() {\r\n        if (this.state.counterOpened === true) {\r\n            this.setState({counterOpened: false})\r\n        } else {\r\n            this.setState({counterOpened: true})\r\n        }\r\n    }\r\n\r\n    changeCount(operator, value) {\r\n        if (operator === \"+\") {\r\n            this.setState((prevState) => {\r\n                return {\r\n                    count: prevState.count + value\r\n                }\r\n            }, () => console.log(\"%c[App] setState() callback\", \"color:orange\"))\r\n        }\r\n        if (operator === \"-\") {\r\n            this.setState((prevState) => {\r\n                return {\r\n                    count: prevState.count - value\r\n                }\r\n            }, () => console.log(\"%c[App] setState() callback\", \"color:orange\"))\r\n        }\r\n    }\r\n\r\n    counterInputChange = (count) => {\r\n        this.setState({count: count})\r\n    }\r\n\r\n    render() {\r\n        console.log(\"%c[App] render()\", \"color:orange\");\r\n        return (\r\n            <React.Fragment>\r\n                <CssBaseline/>\r\n                <Container maxWidth=\"sm\">\r\n                    <Grid container\r\n                          justify=\"center\"\r\n                          direction={\"column\"}\r\n                          alignItems={\"center\"}\r\n                    >\r\n                        <h1 className={styles.heading}>Hello, <br/>React component <br/>state and lifecycle!</h1>\r\n                        <ToggleButton\r\n                            value=\"check\"\r\n                            selected={this.state.selected}\r\n                            onChange={() => {\r\n                                this.setState((prevState) => {\r\n                                    return {\r\n                                        selected: !prevState.selected\r\n                                    }\r\n                                })\r\n                            }}\r\n                            onClick={() => this.showHideCounter()}\r\n                        >\r\n                            {this.state.selected ? \"Close\" : \"Open\"} Counter 1\r\n                        </ToggleButton>\r\n                        <Grid container\r\n                              justify=\"center\"\r\n                              direction={\"row\"}\r\n                              alignItems={\"center\"}\r\n                        >\r\n                            <div className={this.state.counterOpened ? \"\" : styles.hidden}>\r\n                                <Counter\r\n                                    count={this.state.count}\r\n                                    counterOpened={this.state.counterOpened}\r\n                                    nthCounter={1}\r\n                                    selfChanges={this.counterInputChange}\r\n                                />\r\n                            </div>\r\n                            <Counter\r\n                                count={this.state.count}\r\n                                counterOpened={true}\r\n                                nthCounter={2}\r\n                                selfChanges={this.counterInputChange}\r\n                            />\r\n                            <p>{this.state.message}</p>\r\n                        </Grid>\r\n                        <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\">\r\n                            <Button onClick={() => this.changeCount(\"+\", 5)} variant=\"contained\" color=\"primary\">\r\n                                +5\r\n                            </Button>\r\n                            <Button onClick={() => this.changeCount(\"+\", 1)} variant=\"contained\" color=\"primary\">\r\n                                +1\r\n                            </Button>\r\n                            <Button onClick={() => this.changeCount(\"-\", 5)} variant=\"contained\" color=\"secondary\">\r\n                                -5\r\n                            </Button>\r\n                            <Button onClick={() => this.changeCount(\"-\", 10)} variant=\"contained\" color=\"secondary\">\r\n                                -10\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <br/>\r\n                        <Button onClick={() => this.handleClick()} variant=\"contained\">Unmount</Button>\r\n                    </Grid>\r\n                </Container>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}